package pattern.builder;

/**
 * Separate the construction of a complex object from its representation
 * so that the same construction process can create different representations.
 * Docs: https://www.geeksforgeeks.org/builder-design-pattern/
 * Product – The product class defines the type of the complex object that is to be generated by the builder pattern.
 * Builder – This abstract base class defines all the steps that must be taken in order to correctly create a product.
 *           Each step is generally abstract as the actual functionality of the builder is carried out in the concrete subclasses.
 *           The GetProduct method is used to return the final product.
 *           The builder class is often replaced with a simple interface.
 * ConcreteBuilder – There may be any number of concrete builder classes inheriting from Builder.
 *          These classes contain the functionality to create a particular complex product.
 * Director – The director class controls the algorithm that generates the final product object.
 *            A director object is instantiated and its Construct method is called.
 *            The method includes a parameter to capture the specific concrete builder object that is to be used to generate the product.
 *            The director then calls methods of the concrete builder in the correct order to generate the product object.
 *            On completion of the process, the GetProduct method of the builder object can be used to return the product.
 */
public class Main {
    public static void main(String[] args) {
        Builder concreteBuilder = new HomeBuilder();
        Director director = new Director(concreteBuilder);
        director.startHomeConstruction();
        Home home = director.getComplexObjectOfHome();
    }
}
