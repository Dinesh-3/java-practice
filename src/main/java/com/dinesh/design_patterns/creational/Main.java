package design_patterns.creational;

import design_patterns.creational.builder.Builder;
import design_patterns.creational.builder.Director;
import design_patterns.creational.builder.Home;
import design_patterns.creational.builder.HomeBuilder;
import design_patterns.creational.factory.ProfessionFactory;
import design_patterns.creational.factory.Profession;
import design_patterns.creational.prototype.AbstractProfession;
import design_patterns.creational.prototype.PrototypeProfession;
import design_patterns.creational.singleton.SingletonClass;

/**
 *
 *  1. Creational Pattern:
 *      Types:
 *          1. Factory method
 *              In Factory Design Pattern we don't expose the object creation logic and
 *              refer the created object using standard interface. It's also known as virtual constructor.
 *              We pass the class name to the Factory method, will create and return that object
 *          2. Abstract Factory
 *              Is a Factory of Factory class
 *              It is one level higher than factory pattern
 *              Example:
 *                  Trainee Profession and Experienced Profession
 *                  Profession profession = new AbstractFactory("trainee") -> Returns the ProfessionFactory based on
 *                                                                          their need like trainee or experienced
 *                  profession.get("engineer");
 *          3. Builder -> Separate the construction of a complex object from its representation
 *                  so that the same construction process can create different representations.
 *                  Docs: https://www.geeksforgeeks.org/builder-design-pattern/
 *              Product – The product class (or) output object generated by the builder pattern.
 *              Builder – Interface or Abstract for what will need to build the product
 *              ConcreteBuilder – ConcreteBuilder is a real implementation of Builder
 *              Director – This class contains directs procedures to follow in Builder to create complex object
 *                       finally getProduct returns the actual product
 *          4. Prototype -> returns new instances with object cloning
 *          5. Singleton -> Returns only one single object
 */
public class Main {
    public static void main(String[] args) {
        System.out.println("\n*** CREATIONAL DESIGN PATTERN ***\n");

        System.out.println("\n*** Singleton Pattern ***\n");
        SingletonClass instance1 = SingletonClass.getInstance();
        SingletonClass instance2 = SingletonClass.getInstance();
        System.out.println("instance1 = " + instance1);
        System.out.println("instance2 = " + instance2);

        System.out.println("\n*** Factory Pattern ***\n");
        // Factory Pattern we get new Instance by passing class Name
        Profession profession = ProfessionFactory.getProfession("doctor"); // return new Doctor() object
        Profession teacher = ProfessionFactory.getProfession("teacher");
        String doctor = profession.profession();
        System.out.println("doctor = " + doctor);

        System.out.println("\n*** Prototype Pattern ***\n");
        var doctor1 = PrototypeProfession.getNewClone("doctor");
        var doctor2 = PrototypeProfession.getNewClone("doctor");
        System.out.println("doctor1 = " + doctor1);
        System.out.println("doctor2 = " + doctor2);

        var teacher1 = PrototypeProfession.getNewClone("teacher");
        var teacher2 = PrototypeProfession.getNewClone("teacher");
        System.out.println("teacher1 = " + teacher1);
        System.out.println("teacher2 = " + teacher2);

        System.out.println("\n*** Builder Pattern ***\n");

        Builder concreteBuilder = new HomeBuilder();
        Director director = new Director(concreteBuilder);
        director.startHomeConstruction();
        Home home = director.getComplexObjectOfHome();
    }
}
